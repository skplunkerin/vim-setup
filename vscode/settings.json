{
  "vim.insertModeKeyBindingsNonRecursive": [
    // Doing this via my ~/.vimrc
    // {
    //     "before": [
    //         "k",
    //         "j"
    //     ],
    //     "after": [
    //         "<Esc>"
    //     ]
    // },
  ],
  "vim.normalModeKeyBindingsNonRecursive": [
    /*
    Open CodeStream codemark comment (from the current cursor position):
    */
    // Don't think there's a command I can use for this :/
    // {
    //   "before": ["g", "h", "o"],
    //   "commands": [
    //     {
    //       // Open in current frame:
    //       // "command": "codestream.openCodemark"
    //       // "command": "codestream.showReviewDiff"
    //       // "command": "activitybar.codestream.focus"
    //       // "command": "workbench.view.extension.codestream-activitybar"
    //     }
    //   ]
    // },
    /*
    Open definition location (of the definition seen using ["g","h"]):
    */
    {
      "before": ["g", "h", "i"],
      "commands": [
        {
          // Open in current frame:
          "command": "editor.action.revealDefinition",
          "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
        }
      ]
    },
    {
      "before": ["g", "h", "o"],
      "commands": [
        {
          // Open in separate frame:
          "command": "editor.action.revealDefinitionAside",
          "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
        }
      ]
    },
    /*
    Go to next problem:
    */
    {
      "before": ["g", "h", "n"],
      "after": [],
      "commands": [
        {
          "command": "editor.action.marker.next",
          "when": "editorFocus"
        }
      ]
    },
    /*
    Go to previous problem:
    */
    {
      "before": ["g", "h", "p"],
      "after": [],
      "commands": [
        {
          "command": "editor.action.marker.prev",
          "when": "editorFocus"
        }
      ]
    },
    /*
    [Line Note extension] Open note on current line:
    */
    {
      "before": ["g", "n"],
      "after": [],
      "commands": [
        {
          "command": "linenote.openNote"
        }
      ]
    },
    /*
    This is a workaround for VSCodeVim's issue #2007:
    Pressing 'u' will undo all the stack - https://github.com/VSCodeVim/Vim/issues/2007
    */
    {
      "before": ["u"],
      "after": [],
      "commands": [
        {
          "command": "undo"
        }
      ]
    },
    {
      "before": ["<C-r>"],
      "after": [],
      "commands": [
        {
          "command": "redo"
        }
      ]
    },
    /*
    Vim <leader>!!! (just found out about this)
    it's gimicky in VSCodeVim though... :(
    */
    /*
    <leader> Toggle file Explorer
    For some reason, doesn't work
        ["<leader>","n","t"]
    but removing the 3rd before (t) works
        ["<leader>","n"]
    */
    {
      "before": ["<leader>", "e"],
      "commands": ["workbench.action.toggleSidebarVisibility"]
    },
    /*
    Go Test nearest (at cursor)
    NOTE: just use the new keybinding: alt+cmd+t
    */
    {
      "before": ["<leader>", "t", "n"],
      "commands": ["go.debug.cursor"]
    },
    {
      "before": ["g", "i"],
      "commands": ["editor.action.goToImplementation"]
    }
  ],
  "vim.timeout": 250,
  "go.formatTool": "goimports",
  // this causes false Go errors in `Problems` console tab:
  // "go.useLanguageServer": true,
  "workbench.editor.enablePreview": false,
  "editor.formatOnSave": true,
  "editor.minimap.scale": 1,
  // "editor.minimap.size": "fit",
  "editor.minimap.size": "proportional",
  // "editor.minimap.size": "fill",
  "gitlens.defaultDateFormat": "YYYY-MM-DDTHH:mm:ssZ",
  "gitlens.defaultDateShortFormat": "YYYY-MM-DD",
  "salesforcedx-vscode-apex.java.home": "/Library/Java/JavaVirtualMachines/zulu-11.jdk/Contents/Home/",
  "workbench.startupEditor": "newUntitledFile",
  "explorer.confirmDragAndDrop": false,
  /*
  Set vertical ruler
  https://stackoverflow.com/questions/29968499/vertical-rulers-in-visual-studio-code

  You can also have this be language specific (see [git-commit] below)
  https://stackoverflow.com/a/47784112/1180523
  */
  "editor.rulers": [
    {
      "column": 80,
      "color": "#FF786A"
    },
    {
      "column": 120,
      "color": "#E4473A"
    }
  ],
  "workbench.colorCustomizations": {
    // Mini Map
    "minimap.background": "#00000055"
    // Vertical Guide Ruler
    // (replaced by having separate colors defined in editor.rulers)
    // "editorRuler.foreground": "#FF786A",
  },
  "window.title": "${activeEditorMedium}${separator}${rootName}",
  "vim.neovimPath": "/usr/local/bin/nvim",
  "vim.enableNeovim": true,
  "vim.ignorecase": false,
  "ruby.intellisense": "rubyLocate",
  // "ruby.lint": {},
  /*
  Sort cmd+P (and equivalent search boxes) by recency first
  (instead of relevance first)
  */
  "search.quickOpen.history.filterSortOrder": "recency",
  "search.searchOnType": false,
  "explorer.autoReveal": false,
  "vim.leader": ",",
  "vim.vimrc.enable": true,
  "editor.parameterHints.enabled": false,
  "editor.find.cursorMoveOnType": false,
  "vim.hlsearch": true,
  "editor.suggest.statusBar.visible": true,
  // "go.gopath": "/usr/local/go/bin/go",
  // "vim.incsearch": false
  "debug.console.wordWrap": true,
  "go.toolsManagement.autoUpdate": true,
  "editor.insertSpaces": true,
  "editor.tabSize": 2,
  "[ruby]": {
    "editor.insertSpaces": false,
    "editor.tabSize": 2,
    "editor.autoIndent": "advanced"
  },
  "[rust]": {
    "editor.insertSpaces": true,
    "editor.tabSize": 4,
    "editor.autoIndent": "advanced"
  },
  "[json]": {
    "editor.insertSpaces": true,
    "editor.tabSize": 2,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[html]": {
    "editor.insertSpaces": true,
    "editor.tabSize": 20,
    "editor.defaultFormatter": "vscode.html-language-features"
  },
  "[javascript]": {
    "editor.insertSpaces": true,
    "editor.tabSize": 2,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescript]": {
    "editor.insertSpaces": true,
    "editor.tabSize": 2,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescriptreact]": {
    "editor.insertSpaces": true,
    "editor.tabSize": 2,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[go]": {
    "editor.insertSpaces": false,
    "editor.tabSize": 2
  },
  "[markdown]": {
    "editor.insertSpaces": true,
    "editor.tabSize": 2,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[git-commit]": {
    "editor.rulers": [50]
  },
  "cSpell.userWords": [
    "appts",
    "authed",
    "awseb",
    "awslogs",
    "bcrypt",
    "Behaviour",
    "bools",
    "Bootcamp",
    "bugsnag",
    "BUIDLing",
    "buildspec",
    "Burstable",
    "Bytea",
    "CALENDLY",
    "clubready",
    "CNAME",
    "Codeship",
    "Confs",
    "Conslt",
    "cooldown",
    "creds",
    "CSVs",
    "dbdata",
    "DECR",
    "devpassword",
    "devserver",
    "dftxtrvkx",
    "dockerized",
    "dockerizing",
    "Dockerrun",
    "dyno",
    "ebcli",
    "ebextensions",
    "ebiten",
    "ebitenutil",
    "Enqueable",
    "Enqueuer",
    "Favicons",
    "freemium",
    "Getenv",
    "gmail",
    "gobuffalo",
    "godotenv",
    "gofrs",
    "gohtml",
    "gomock",
    "GOPATH",
    "goqu",
    "gorm",
    "Grider",
    "guregu",
    "gzipped",
    "hajimehoshi",
    "hubspotcrm",
    "IMDS",
    "Infof",
    "Infusionsoft",
    "ioutil",
    "iowait",
    "jessewardle",
    "JSON's",
    "jwardle",
    "Keap",
    "keyname",
    "Keyspace",
    "ldflags",
    "loadbalancer",
    "Mashery",
    "Mindbody",
    "minifier",
    "mockgen",
    "Moralis",
    "ngrok",
    "perr",
    "pgconn",
    "pgcrypto",
    "pgtype",
    "Photoshop",
    "Pleitez",
    "postgres",
    "Printf",
    "procstat",
    "Pseudocode",
    "psql",
    "rdata",
    "Repos",
    "requirepass",
    "resps",
    "Roadmap",
    "SETEX",
    "signup",
    "Skipio",
    "Skipio's",
    "SMEMBERS",
    "Sprintf",
    "SREM",
    "Stargate",
    "stdouterr",
    "stretchr",
    "struct",
    "Structs",
    "targetgroup",
    "taskdefinition",
    "testhelper",
    "timestamptz",
    "totalcpu",
    "Trello",
    "Udemy",
    "Unmapper",
    "unmarshalling",
    "Upsert",
    "Upserts",
    "utfbom",
    "Warnf",
    "Zoho's",
    "zohocrmv",
    "ZRANGE"
  ],
  "cSpell.ignoreRegExpList": ["/\"github\\.com.[^\\\"]*\"/"],
  "terminal.integrated.tabs.enabled": true,
  "cSpell.enabled": true,
  "editor.cursorStyle": "line",
  "editor.lineNumbers": "on",
  "editor.wordSeparators": "/\\()\"':,.;<>~!@#$%^&*|+=[]{}`?-",
  "editor.wordWrap": "off",
  "editor.renderWhitespace": "all",
  // TODO: figure out how to add a custom dictionary to cSpell, where the
  // dropdown option of "Add: "{x}" to {custom} dictionary" is available.
  // Apparently you can add custom dictionaries (see below attempts), but I see
  // no way of knowing if this works, if I"m doing it wrong, or if adding a
  // custom dictionary doesn't mean what I think it means. :/
  //
  // "cSpell.languageSettings": [
  //   // { "languageId": "go",     "allowCompoundWords": true,  "dictionaries": ["go"] },
  //   // { "languageId": "*",     "allowCompoundWords": true,  "dictionaries": ["go"] },
  // ],
  // List of dictionaries to use when checking files.
  // "cSpell.dictionaries": [
  //   "go"
  // ],
  // "cSpell.dictionaryDefinitions": [
  //   // { "name": "go", "path": "/Users/guest/projects/cSpell-WordLists/dictionaries/medicalterms-en.txt"},
  //   { "name": "go", "path": "/Users/chrisreynolds/Library/Application Support/Code/User/cSpell-WordLists/dictionaries/go-en.txt"},
  // ],
  "html.format.indentInnerHtml": true,
  "files.associations": {
    "*.gohtml": "html",
    "*.config": "yaml"
  },
  "editor.hover.delay": 2000,
  "codestream.serverUrl": "https://api.codestream.com",
  "codestream.email": "reynolds87chris@gmail.com"
}
