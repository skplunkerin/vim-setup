{
  "vim.insertModeKeyBindingsNonRecursive": [
    // Doing this via my ~/.vimrc
    // {
    //     "before": [
    //         "k",
    //         "j"
    //     ],
    //     "after": [
    //         "<Esc>"
    //     ]
    // },
  ],
  "vim.normalModeKeyBindingsNonRecursive": [
    /*
    Open CodeStream codemark comment (from the current cursor position):
    */
    // Don't think there's a command I can use for this :/
    // {
    //   "before": ["g", "h", "o"],
    //   "commands": [
    //     {
    //       // Open in current frame:
    //       // "command": "codestream.openCodemark"
    //       // "command": "codestream.showReviewDiff"
    //       // "command": "activitybar.codestream.focus"
    //       // "command": "workbench.view.extension.codestream-activitybar"
    //     }
    //   ]
    // },
    /*
    Open definition location (of the definition seen using ["g","h"]):
    */
    {
      "before": ["g", "h", "i"],
      "commands": [
        {
          // Open in current frame:
          "command": "editor.action.revealDefinition",
          "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
        }
      ]
    },
    {
      "before": ["g", "h", "o"],
      "commands": [
        {
          // Open in separate frame:
          "command": "editor.action.revealDefinitionAside",
          "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
        }
      ]
    },
    /*
    Go to next problem:
    */
    {
      "before": ["g", "h", "n"],
      "after": [],
      "commands": [
        {
          "command": "editor.action.marker.next",
          "when": "editorFocus"
        }
      ]
    },
    /*
    Go to previous problem:
    */
    {
      "before": ["g", "h", "p"],
      "after": [],
      "commands": [
        {
          "command": "editor.action.marker.prev",
          "when": "editorFocus"
        }
      ]
    },
    /*
    [Line Note extension] Open note on current line:
    */
    {
      "before": ["g", "n"],
      "after": [],
      "commands": [
        {
          "command": "linenote.openNote"
        }
      ]
    },
    /*
     * Toggles a line breakpoint on/off.
     */
    {
      "before": ["g", "b", "b"],
      "after": [],
      "commands": [
        {
          "command": "editor.debug.action.toggleBreakpoint"
        }
      ],
      "when": "vim.mode == 'Normal' && debuggersAvailable && editorTextFocus"
    },
    /*
     * Goes to next/previous line breakpoint.
     */
    {
      "before": ["g", "b", "n"],
      "after": [],
      "commands": [
        {
          "command": "editor.debug.action.goToNextBreakpoint"
        }
      ],
      "when": "vim.mode == 'Normal' && debuggersAvailable && editorTextFocus"
    },
    {
      "before": ["g", "b", "p"],
      "after": [],
      "commands": [
        {
          "command": "editor.debug.action.goToPreviousBreakpoint"
        }
      ],
      "when": "vim.mode == 'Normal' && debuggersAvailable && editorTextFocus"
    },
    /*
    This is a workaround for VSCodeVim's issue #2007:
    Pressing 'u' will undo all the stack - https://github.com/VSCodeVim/Vim/issues/2007
    */
    {
      "before": ["u"],
      "after": [],
      "commands": [
        {
          "command": "undo"
        }
      ]
    },
    {
      "before": ["<C-r>"],
      "after": [],
      "commands": [
        {
          "command": "redo"
        }
      ]
    },
    /*
    Vim <leader>!!! (just found out about this)
    it's gimmicky in VSCodeVim though... :(
    */
    /*
    <leader> Toggle file Explorer
    For some reason, doesn't work
        ["<leader>","n","t"]
    but removing the 3rd before (t) works
        ["<leader>","n"]
    */
    {
      "before": ["<leader>", "e"],
      "commands": ["workbench.action.toggleSidebarVisibility"]
    },
    /*
    Go Test nearest (at cursor)
    NOTE: just use the new keybinding: alt+cmd+t
    */
    {
      "before": ["<leader>", "t", "n"],
      "commands": ["go.debug.cursor"]
    },
    {
      "before": ["g", "i"],
      "commands": ["editor.action.goToImplementation"]
    }
  ],
  "vim.timeout": 250,
  "go.formatTool": "goimports",
  // this causes false Go errors in `Problems` console tab:
  // "go.useLanguageServer": true,
  "workbench.editor.enablePreview": false,
  "gitlens.defaultDateFormat": "YYYY-MM-DDTHH:mm:ssZ",
  "gitlens.defaultDateShortFormat": "YYYY-MM-DD",
  "salesforcedx-vscode-apex.java.home": "/Library/Java/JavaVirtualMachines/zulu-11.jdk/Contents/Home/",
  "workbench.startupEditor": "newUntitledFile",
  "explorer.confirmDragAndDrop": false,
  "workbench.colorCustomizations": {
    // Mini Map
    // "minimap.background": "#00000055"
    // Vertical Guide Ruler
    // (replaced by having separate colors defined in editor.rulers)
    // "editorRuler.foreground": "#FF786A",
    "[EVA Unit-1 Theme V2]": {
      // "principal-Colors": {
      //   "purple-deep": "#7F47CF",
      //   "purple": "#986FD8",
      //   "purple-cake": "#B0A8DB",
      //   "yellow": "#F5AD43",
      //   "green-cake": "#55ff00",
      //   "green": "#58BD3C",
      //   "green-deep": "#4BA428",
      //   "pink": "#fa04d3",
      //   "pink-cake": "#c99ec7"
      // },
      // Add opacity to the minimap
      "minimap.background": "#1e1e1e70",

      // Add left border line when editing inside indented code blocks
      "editorIndentGuide.background": "#4BA428",

      // Search input text selection
      "selection.background": "#fa04d18f",
      // Input font color
      // "input.foreground": "#ff0000",
      // Input border
      // "input.border": "#ff0000",
      // Input background color
      // "input.background": "#ff0000",
      // Input placeholder text (when no text in field)
      // "input.placeholderForeground": "#ff0000",

      // "list.highlightForeground": "#ff0000",
      // "list.focusHighlightForeground": "#ff0000",
      // "inputOption.activeBorder": "#ff0000",
      // "sideBar.background": "#ff0000",
      // "sideBar.foreground": "#ff0000",
      // "sideBar.border": "#ff0000",
      // "sideBar.dropBackground": "#ff0000",
      // "sideBarTitle.foreground": "#ff0000",
      // "sideBarSectionHeader.background": "#ff0000",
      // "sideBarSectionHeader.foreground": "#ff0000",
      // "editor.selectionBackground": "#ff0000",
      // "editor.selectionForeground": "#ff0000",
      // "editor.inactiveSelectionBackground": "#ff0000",
      // "editor.selectionHighlightBackground": "#ff0000",
      // "editor.selectionHighlightBorder": "#ff0000",
      // "editorOverviewRuler.selectionHighlightForeground": "#ff0000",
      // "editorSuggestWidget.selectedBackground": "#ff0000",
      // "peekViewResult.selectionBackground": "#ff0000",
      // "peekViewResult.selectionForeground": "#ff0000",
      // "terminal.selectionBackground": "#ff0000",
      // "list.activeSelectionBackground": "#ff0000",
      // "list.activeSelectionForeground": "#ff0000",
      // "list.inactiveSelectionBackground": "#ff0000",
      // "list.inactiveSelectionForeground": "#ff0000",

      // "sideBar.background": "#347890"
      // This controls main selection color:
      "editor.selectionBackground": "#8047cf71", // Default: "#e091ff2f"
      // This controls the matching highlights (of selection) color:
      // "editor.selectionHighlightBackground": "#fa04d3",
      // "editor.selectionHighlightBorder": "#1aff0080",
      "editor.selectionHighlightBorder": "#fa04d3",

      // This is for selected text in inactive editor panes
      // "editor.inactiveSelectionBackground": "#d9ff00",

      // Editor line number colors:
      "editorLineNumber.foreground": "#93b853", // Default: "#93b853"
      "editorLineNumber.activeForeground": "#fa04d3" // Default: "#8355a0"
    },
    "[Girl, Do you like Unicorn?]": {
      // Main hot pink: "#d81e5b"

      // Search input text selection
      "selection.background": "#fa04d18f",
      "editor.selectionBackground": "#8047cf71",

      // This controls the matching highlights (of selection) color:
      "editor.selectionHighlightBorder": "#d81e5b",

      // This is for selected text in inactive editor panes
      "editor.inactiveSelectionBackground": "#d81e5b",

      // Editor line number colors:
      // "editorLineNumber.foreground": "#93b853",
      // "editorLineNumber.activeForeground": "#fa04d3"
      "editorLineNumber.foreground": "#fa04d3",
      "editorLineNumber.activeForeground": "#93b853",

      // Hovering over list/tree items (like the debug console, popup menu
      // items)
      "list.hoverBackground": "#d81e5c83" // Default?: "#d81e5b"
    }
  },
  "window.title": "${activeEditorMedium}${separator}${rootName}",
  "vim.neovimPath": "/usr/local/bin/nvim",
  "vim.enableNeovim": true,
  "vim.ignorecase": false,
  "ruby.useLanguageServer": true,
  "ruby.intellisense": "rubyLocate",
  // "ruby.lint": {},
  "ruby.codeCompletion": "rcodetools",
  "ruby.languageServer": {},
  /*
  Sort cmd+P (and equivalent search boxes) by recency first
  (instead of relevance first)
  */
  "search.quickOpen.history.filterSortOrder": "recency",
  "search.searchOnType": false,
  "explorer.autoReveal": false,
  "vim.leader": ",",
  "vim.vimrc.enable": true,
  "vim.hlsearch": true,
  // "go.gopath": "/usr/local/go/bin/go",
  // "vim.incsearch": false
  "debug.console.wordWrap": true,
  "go.toolsManagement.autoUpdate": true,
  "editor.formatOnSave": true,
  "editor.minimap.scale": 1,
  // "editor.minimap.size": "fit",
  "editor.minimap.size": "proportional",
  // "editor.minimap.size": "fill",
  /*
  Set vertical ruler
  https://stackoverflow.com/questions/29968499/vertical-rulers-in-visual-studio-code

  You can also have this be language specific (see [git-commit] below)
  https://stackoverflow.com/a/47784112/1180523
  */
  "editor.rulers": [
    {
      "column": 80,
      "color": "#FF786A"
    },
    {
      "column": 120,
      "color": "#E4473A"
    }
  ],
  "editor.parameterHints.enabled": false,
  "editor.find.cursorMoveOnType": false,
  "editor.suggest.statusBar.visible": true,
  "editor.insertSpaces": true,
  "editor.tabSize": 2,
  // don't even try, you can't control how csharp formatting works 🙄
  // To get the correct 4 spaces indentation working, I had to:
  //  1. disable the "Csharp > Format: Enable" setting
  //  2. install the CSharpier extension, and install the CSharpier globally
  //     dependency
  // "[csharp]": {
  //   // "editor.defaultFormatter": "ms-dotnettools.csharp",
  //   "editor.insertSpaces": true,
  //   "editor.tabSize": 10,
  // },
  "[ruby]": {
    "editor.insertSpaces": true,
    "editor.tabSize": 2,
    "editor.autoIndent": "advanced"
  },
  "[rust]": {
    "editor.insertSpaces": true,
    "editor.tabSize": 4,
    "editor.autoIndent": "advanced"
  },
  "[json]": {
    "editor.insertSpaces": true,
    "editor.tabSize": 2,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[html]": {
    "editor.insertSpaces": true,
    "editor.tabSize": 4,
    "editor.defaultFormatter": "vscode.html-language-features"
  },
  "[javascript]": {
    "editor.insertSpaces": true,
    "editor.tabSize": 2,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescript]": {
    "editor.insertSpaces": true,
    "editor.tabSize": 2,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescriptreact]": {
    "editor.insertSpaces": true,
    "editor.tabSize": 2,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  // neither of these work
  // "[sol]": {
  // "[solidity]": {
  //   "editor.insertSpaces": true,
  //   "editor.tabSize": 4,
  // },
  "[go]": {
    "editor.insertSpaces": false,
    "editor.tabSize": 2
  },
  "[markdown]": {
    "editor.insertSpaces": true,
    "editor.tabSize": 2,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[git-commit]": {
    "editor.rulers": [50]
  },
  "cSpell.userWords": [
    "acuityscheduling",
    "Anki",
    "Apigee",
    "APIKEY",
    "apitalize",
    "APIURL",
    "appts",
    "authed",
    "automations",
    "awseb",
    "awslogs",
    "bcrypt",
    "Behaviour",
    "bignumber",
    "binks",
    "blitzjs",
    "bools",
    "Bootcamp",
    "bugsnag",
    "BUIDLing",
    "buildspec",
    "Burstable",
    "Bytea",
    "bytecode",
    "CALENDLY",
    "camaro",
    "Canva",
    "chakra",
    "chugga",
    "clubready",
    "CNAME",
    "codegen",
    "codemark",
    "Codeship",
    "codestream",
    "Confs",
    "Conslt",
    "CONTRIBSYS",
    "cooldown",
    "creds",
    "crowdsale",
    "CSVs",
    "csvutil",
    "cypherpunk",
    "cypherpunks",
    "datetime",
    "dbdata",
    "DDTHH",
    "debogger",
    "DECR",
    "deletable",
    "devpassword",
    "devs",
    "devserver",
    "dftxtrvkx",
    "Diffie",
    "discoverability",
    "dockerized",
    "dockerizing",
    "Dockerrun",
    "doctoc",
    "dotnettools",
    "dropdowns",
    "dyno",
    "ebcli",
    "ebextensions",
    "ebiten",
    "ebitenutil",
    "ECDLP",
    "Emittance",
    "Enqueable",
    "Enqueuer",
    "envconfig",
    "errgroup",
    "Estefany",
    "everytime",
    "Extropian",
    "Extropians",
    "Extropy",
    "faktory",
    "fastjson",
    "FAUSTWP",
    "Favicons",
    "freemium",
    "Getenv",
    "gmail",
    "gobuffalo",
    "godotenv",
    "Göerli",
    "gofrs",
    "gohtml",
    "goimports",
    "gomock",
    "googleapi",
    "googlesheets",
    "GOPATH",
    "goqu",
    "gorm",
    "Grider",
    "GSHEETS",
    "guregu",
    "gzipped",
    "Hackathon",
    "hajimehoshi",
    "hardfork",
    "Hasher",
    "headlessui",
    "heroicons",
    "HMAC",
    "hstore",
    "httpmock",
    "HUBSPOT",
    "hubspotcrm",
    "IMDS",
    "incsearch",
    "Infof",
    "Infusionsoft",
    "inpututil",
    "integrationtest",
    "intouch",
    "ioutil",
    "iowait",
    "ipfs",
    "jessewardle",
    "journaling",
    "JSON's",
    "jwardle",
    "Keap",
    "keccak",
    "keyname",
    "Keyspace",
    "Klaviyo",
    "ldflags",
    "Lerp",
    "linenote",
    "loadbalancer",
    "loglevel",
    "logrus",
    "Mashery",
    "Mathf",
    "meowser",
    "Merkle",
    "Metabase",
    "metricstest",
    "Mindbody",
    "minifier",
    "MMORPG",
    "mockgen",
    "Moralis",
    "moralisweb",
    "Nakamoto",
    "neotokyo",
    "neotokyodevelopment",
    "ngrok",
    "nomicfoundation",
    "nomiclabs",
    "nttools",
    "nuxt",
    "nuxtjs",
    "nvim",
    "omnisharp",
    "opentype",
    "otaku",
    "Pendo",
    "perr",
    "pgconn",
    "pgcrypto",
    "pgtype",
    "Photoshop",
    "Pinia",
    "Pipeliner",
    "PKCE",
    "Pleitez",
    "postgres",
    "Printf",
    "procstat",
    "promisfy",
    "providerstest",
    "proxying",
    "Pseudocode",
    "psql",
    "queueable",
    "Quickstart",
    "rdata",
    "Repos",
    "reqs",
    "requirepass",
    "resps",
    "retarget",
    "Rigidbody",
    "Roadmap",
    "salesforcedx",
    "Satoshi",
    "secp",
    "SETEX",
    "sidekiq",
    "signin",
    "signup",
    "Skipio",
    "Skipio's",
    "skipiotest",
    "skplunkerin",
    "SMEMBERS",
    "solopreneur",
    "Sprintf",
    "spritesheet",
    "SREM",
    "Stargate",
    "stdouterr",
    "strategize",
    "stretchr",
    "struct",
    "Structs",
    "subforums",
    "Syncer",
    "tailwindcss",
    "targetgroup",
    "taskdefinition",
    "testflight",
    "testhelper",
    "tilemap",
    "tilemaps",
    "Timelock",
    "timestamptz",
    "Topher",
    "totalcpu",
    "Trello",
    "txos",
    "Udemy",
    "Unmapper",
    "unmarshalling",
    "Upsert",
    "upserted",
    "upserting",
    "Upserts",
    "URLJSON",
    "utfbom",
    "UTXOs",
    "vals",
    "vimrc",
    "Vitalik",
    "vscodevim",
    "Wagmi",
    "Wardle",
    "Warnf",
    "wasd",
    "xlarge",
    "xsmall",
    "Zoho's",
    "zohocrmv",
    "ZRANGE"
  ],
  "cSpell.ignoreRegExpList": ["/\"github\\.com.[^\\\"]*\"/"],
  "terminal.integrated.tabs.enabled": true,
  "cSpell.enabled": true,
  "editor.cursorStyle": "line",
  "editor.lineNumbers": "on",
  "editor.wordSeparators": "/\\()\"':,.;<>~!@#$%^&*|+=[]{}`?-",
  "editor.wordWrap": "on",
  "editor.renderWhitespace": "all",
  // TODO: figure out how to add a custom dictionary to cSpell, where the
  // dropdown option of "Add: "{x}" to {custom} dictionary" is available.
  // Apparently you can add custom dictionaries (see below attempts), but I see
  // no way of knowing if this works, if I"m doing it wrong, or if adding a
  // custom dictionary doesn't mean what I think it means. :/
  //
  // "cSpell.languageSettings": [
  //   // { "languageId": "go",     "allowCompoundWords": true,  "dictionaries": ["go"] },
  //   // { "languageId": "*",     "allowCompoundWords": true,  "dictionaries": ["go"] },
  // ],
  // List of dictionaries to use when checking files.
  // "cSpell.dictionaries": [
  //   "go"
  // ],
  // "cSpell.dictionaryDefinitions": [
  //   // { "name": "go", "path": "/Users/guest/projects/cSpell-WordLists/dictionaries/medicalterms-en.txt"},
  //   { "name": "go", "path": "/Users/chrisreynolds/Library/Application Support/Code/User/cSpell-WordLists/dictionaries/go-en.txt"},
  // ],
  "html.format.indentInnerHtml": true,
  "files.associations": {
    "*.gohtml": "html",
    "*.config": "yaml"
  },
  "editor.hover.delay": 2000,
  "codestream.serverUrl": "https://api.codestream.com",
  "codestream.email": "reynolds87chris@gmail.com",
  "vim.foldfix": true,
  "vim.mouseSelectionGoesIntoVisualMode": false,
  "redhat.telemetry.enabled": false,
  "go.delveConfig": {
    "showGlobalVariables": true
  },
  "settingsSync.ignoredExtensions": [
    "ms-dotnettools.csharp",
    "csharpier.csharpier-vscode",
    "kleber-swf.unity-code-snippets",
    "fudge.auto-using"
  ],
  // To fix C# errors:
  // 1. revert extension version to v1.24.4
  // 2. Set "useGlobalMono" to "always" (this was deprecated in v1.25.0)
  "omnisharp.useGlobalMono": "always",
  // "omnisharp.useMono": true,
  "omnisharp.projectLoadTimeout": 10,
  "omnisharp.monoPath": "/Library/Frameworks/Mono.framework/Versions/Current",
  "csharp.format.enable": false,
  "csharp.inlayHints.parameters.enabled": true,
  // "workbench.iconTheme": "vscode-icons",
  "workbench.iconTheme": "vscode-icons",
  "files.exclude": {
    "**/.DS_Store": false,
    "**/.git": false
  },
  "eslint.alwaysShowStatus": true,
  "eslint.debug": true,
  "vsicons.dontShowNewVersionMessage": true,
  "vscode-erb-beautify.executePath": "/Users/chrisreynolds/.rvm/gems/ruby-3.1.2/bin/htmlbeautifier",
  "editor.useTabStops": false,
  "editor.detectIndentation": false,
  "extensions.experimental.affinity": {
    "vscodevim.vim": 1
  },
  "workbench.colorTheme": "EVA Unit-1 Theme V2",
  "[javascriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "javascript.updateImportsOnFileMove.enabled": "never",
  "vim.incsearch": false,
  "solidity.telemetry": true,
  "window.zoomLevel": -0.5,
  "explorer.compactFolders": false
  // "omnisharp.path": "/Users/meowser/.vscode/extensions/ms-dotnettools.csharp-1.25.0-darwin-x64/.omnisharp/1.39.0-net6.0/OmniSharp",
  // "omnisharp.useModernNet": false, // default: true
}
