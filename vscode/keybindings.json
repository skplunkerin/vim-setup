// Place your key bindings in this file to override the defaults
[
  {
    "key": "shift+cmd+i",
    "command": "editor.action.revealDefinitionAside",
    "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  /*
    [Line Note extension] Create (or open current if exists) a note for current
    line:
  */
  {
    "key": "shift+alt+n",
    "command": "linenote.addNote",
    "when": "vim.mode == 'Normal' && textInputFocus"
  },
  /*
  Go: Test Nearest (at cursor position)
  */
  {
    "key": "cmd+alt+t",
    "command": "go.debug.cursor"
  },
  // I keep hitting this by accident, even though I've not used this before.
  // Is it possible to have this only work if I'm withing a Go test file?
  {
    "key": "cmd+enter",
    "command": "go.debug.cursor",
    "when": "resourceFilename =~ /_test\\.go$/"
  },
  {
    "key": "alt+cmd+t",
    "command": "-workbench.action.closeOtherEditors"
  },
  /*
  Allow Vim "scroll down/up" in Explorer list
  NOTE: doesn't correctly move cursor, so navigating will bring back to last 
  cursor position >:C
  Defaults: cmd+down|up

  TODO: figure out how to fix this...
  https://vscodevim.slack.com/archives/C0ENQMTUM/p1587048784046000
  */
  {
    "key": "ctrl+e",
    "command": "list.scrollDown",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+y",
    "command": "list.scrollUp",
    "when": "listFocus && !inputFocus"
  },
  /*
  Allow Vim's line/page "scroll down/up" to work properlly with VSCode's
  collapsed (folded) nested items.
  (the normal VSVim scrolling stops once a collapsed item hits the top/bottom)

  NOTE: this succeeds in scrolling past the folded line, but fails in that it
  leaves the cursor behind when you scroll past the screen... once you try
  j,k,h,l movement, you'll shoot back to where the cursor previously was.
  */
  // {
  //   "key": "ctrl+y",
  //   "command": "scrollLineUp",
  //   "when": "vim.mode == 'Normal' && textInputFocus"
  // },
  // {
  //   "key": "ctrl+e",
  //   "command": "scrollLineDown",
  //   "when": "vim.mode == 'Normal' && textInputFocus"
  // },
  // {
  //   "key": "ctrl+u",
  //   "command": "scrollPageUp",
  //   "when": "vim.mode == 'Normal' && textInputFocus"
  // },
  // {
  //   "key": "ctrl+d",
  //   "command": "scrollPageDown",
  //   "when": "vim.mode == 'Normal' && textInputFocus"
  // },
  /*
  Better match the Vim cursor up/down to match the VSCode's cursor up/down:
  (in particular, when an item is collapsed (folded), the VSCode cursor will end
  up opening it, but the VSVim up/down won't, it just gets stuck on the top of
  the collapse.)

  P.S. I don't like that the collapsed item opens up with this... I'd like to
  change VSCode to just treat it like a single line, forcing me to manually
  un-collapse it.
  - Looks like this VSVim "vim.foldfix" hack is just for this, but it's not a
    complete fix as they're needing to wait for VSCode to allow proper API
    access to create an official fix.
    https://stackoverflow.com/a/59129741/1180523
    - sadly, this hack fix doesn't work with scrolling/page-scrolling
      BUT, if you move the cursor past the folded line first, then
      scroll/page-scroll, it's a work-around.
  */
  {
    "key": "k",
    "command": "extension.vim_up",
    "when": "vim.mode == 'Normal' && editorTextFocus && vim.active && !inDebugRepl && !parameterHintsVisible && !suggestWidgetVisible"
  },
  {
    "key": "j",
    "command": "extension.vim_down",
    "when": "vim.mode == 'Normal' && editorTextFocus && vim.active && !inDebugRepl && !parameterHintsVisible && !suggestWidgetVisible"
  },
  /*
  "ctrl+cmd+left|right" moves editor to prev/next editor groups.
  These will allow adding to below/above groups
  */
  {
    "key": "ctrl+cmd+down",
    "command": "workbench.action.moveEditorToBelowGroup",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+cmd+up",
    "command": "workbench.action.moveEditorToAboveGroup",
    "when": "editorTextFocus"
  },
  /*
  I disabled the (disorienting) "explorer.autoReveal" in settings.json
  (where active editor file refreshes Explorer to show where file is located)
  This will allow me to go to the active file location in Explorer
  when I want that to happen
  */
  {
    "key": "cmd+shift+a",
    "command": "workbench.files.action.showActiveFileInExplorer",
    "when": "textInputFocus"
  },
  // Get back to file (only works for Explorer, not OpenEditorsExplorer)
  {
    "key": "cmd+shift+a",
    "command": "workbench.view.explorer",
    "when": "filesExplorerFocus"
    // "when": "filesExplorerFocus || workbench.explorer.openEditorsView."
  },
  /*
  Add Vims default "shift+right"/etc functionality
  https://vscodevim.slack.com/archives/C0ENQMTUM/p1586879441027800
  cursorWordEndRight, cursorWordEndLeft, cursorWordStartRight or cursorWordStartLeft
  */
  // {
  //     "key": "shift+up",
  //     "command": "cursorPageUp",
  //     "when": "textInputFocus"
  // },
  // {
  //     "key": "shift+right",
  //     "command": "cursorWordEndRight",
  //     "when": "textInputFocus"
  // },
  // {
  //     "key": "shift+down",
  //     "command": "cursorPageDown",
  //     "when": "textInputFocus"
  // },
  // {
  //     "key": "shift+left",
  //     "command": "cursorWordEndLeft",
  //     "when": "textInputFocus"
  // },
  /*
  Clear Terminal
  Default: cmd+k
  */
  {
    "key": "ctrl+l",
    "command": "workbench.action.terminal.clear",
    "when": "terminalFocus"
  },
  /*
  Open Quick Open files to side, rather than in current editor group
  (here for reminder)
  */
  // Default:
  // {
  //     "key": "cmd+enter",
  //     "command": "workbench.action.alternativeAcceptSelectedQuickOpenItem",
  //     "when": "inQuickOpen"
  // },
  /*
  Override VSCodeVim's "cmd+c" command, which exits you from "insert mode"
  https://vscodevim.slack.com/archives/C0ENQMTUM/p1586017571018100
  */
  // {
  //     "key": "cmd+c",
  //     // "command": "extension.vim_cmd+c", // Vim extension command will exit Insert mode if used
  //     "command": "execCopy",
  //     "when": "editorTextFocus && vim.active && vim.overrideCopy && vim.use<D-c> && !inDebugRepl"
  // },
  /*
  this also works, though I'm not sure where @bronson found this command:
  https://vscodevim.slack.com/archives/C0ENQMTUM/p1586194542019000?thread_ts=1586017571.018100&cid=C0ENQMTUM
  */
  {
    "key": "cmd+c",
    "command": "editor.action.clipboardCopyAction",
    "when": "editorTextFocus"
  },
  //   {
  //     "key": "cmd+c",
  //     "command": "execCopy"
  //   }
  /*
  These already built into VSCode
  (adding here to reference if I ever forget command)
  https://stackoverflow.com/questions/44018175/visual-studio-code-hotkey-to-move-a-tab-from-one-of-two-split-editors-to-anothe
  */
  // {
  //     "key": "ctrl+cmd+left",
  //     "command": "workbench.action.moveEditorToPreviousGroup"
  // },
  // {
  //     "key": "ctrl+cmd+right",
  //     "command": "workbench.action.moveEditorToNextGroup"
  // },
  /*
  Navigate between panes
  https://stackoverflow.com/a/50593160/1180523
  */
  {
    "key": "ctrl+left",
    "command": "workbench.action.navigateLeft"
    // "when": "vim.mode == 'Normal' && textInputFocus"
  },
  {
    "key": "ctrl+right",
    "command": "workbench.action.navigateRight"
    // "when": "vim.mode == 'Normal' && textInputFocus"
  },
  {
    "key": "ctrl+up",
    "command": "workbench.action.navigateUp"
    // "when": "vim.mode == 'Normal' && textInputFocus"
  },
  {
    "key": "ctrl+down",
    "command": "workbench.action.navigateDown"
    // "when": "vim.mode == 'Normal' && textInputFocus"
  },
  /*
    Navigate between panes
    https://stackoverflow.com/a/50593160/1180523
    */
  {
    "key": "ctrl+h",
    "command": "workbench.action.navigateLeft"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.navigateRight",
    "when": "!terminalFocus" /* Want to use ctrl+l to clear terminal, not navigate away */
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.navigateUp"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.navigateDown"
  },
  /*
  Attempt to fix current cursor jump bug via non vim tab movement, based on
  this suggestion:
  https://github.com/VSCodeVim/Vim/issues/8200#issuecomment-1493346536
  */
  {
    "key": "shift+cmd+[",
    "command": "workbench.action.previousEditor",
    // "when": "vim.mode == 'Normal' && textInputFocus"
  },
  {
    "key": "shift+cmd+]",
    "command": "workbench.action.nextEditor",
    // "when": "vim.mode == 'Normal' && textInputFocus"
  },
  /*
  Navigate between File Explorer, and back to last pane/file/line
  https://github.com/microsoft/vscode/issues/4557#issuecomment-276960041
  https://vscodevim.slack.com/archives/C0ENQMTUM/p1583934716062300
  */
  {
    "key": "ctrl+a",
    "command": "workbench.view.explorer",
    "when": "textInputFocus && !filesExplorerFocus || filesExplorerFocus"
  },
  // doesn't work, need to run extension to do multiple commands
  // https://stackoverflow.com/a/49612562/1180523
  // {
  //     "key": "ctrl+a",
  //     "commands": [
  //         "workbench.view.explorer",
  //         "workbench.action.toggleSidebarVisibility",
  //     ],
  //     "when": "filesExplorerFocus"
  // },
  /*
  Open Context menu (right click menu) from File Explorer
  (don't need to open context menu, just run the shortcuts to do the actions you want)
  https://vscodevim.slack.com/archives/C0ENQMTUM/p1585145701006900
  https://github.com/microsoft/vscode/issues/93497
  */
  // Insert/Add file childnode
  // NOTE: see below "ctrl+n" when vim.mode == 'Normal'
  {
    "key": "i",
    "command": "explorer.newFile",
    "when": "filesExplorerFocus && !inputFocus"
  },
  // Insert/Add folder childnode
  // NOTE: see below "ctrl+shift+n"
  {
    "key": "shift+i",
    "command": "explorer.newFolder",
    "when": "filesExplorerFocus && !inputFocus"
  },
  // Rename current node
  // Default: enter
  // "key": "c i w", // Doesn't work... conflicts with above "i"
  {
    "key": "r", // replace
    "command": "renameFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "m", // Nerdtree (m)ove
    "command": "renameFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  // Delete current node
  // Default: cmd+backspace
  {
    "key": "d",
    "command": "moveFileToTrash",
    "when": "explorerResourceMoveableToTrash && explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  // Yank current node
  // Default: cmd+c
  // TODO: how can I do c || y???
  {
    "key": "c",
    "command": "filesExplorer.copy",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
  },
  {
    "key": "y",
    "command": "filesExplorer.copy",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
  },
  // Paste yanked node
  // Default: cmd+v
  {
    "key": "p",
    "command": "filesExplorer.paste",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  /*
  Create new file in current working folder
  https://stackoverflow.com/a/39599731/1180523
  NOTE: see above "i" when explorderViewletVisible
  */
  {
    "key": "ctrl+n",
    "command": "explorer.newFile",
    // "when": "vim.mode == 'Normal'"
    "when": "filesExplorerFocus && !inputFocus"
  },
  /*
  Create new folder in current working folder
  https://stackoverflow.com/a/39599731/1180523
  NOTE: see above "shift+i" when explorderViewletVisible
  */
  {
    "key": "ctrl+shift+n",
    "command": "explorer.newFolder"
  },
  /*
  Open/Navigate the suggestions dropdown via VIM while in Insert mode
  https://vscodevim.slack.com/archives/C0ENQMTUM/p1582202670058400
  https://www.gitmemory.com/issue/VSCodeVim/Vim/1372/504856503
  */
  {
    "key": "ctrl+n",
    "command": "editor.action.triggerSuggest",
    "when": "vim.mode == 'Insert'"
  },
  // hide suggest (this has the side-effect of not exiting insert mode):
  // {
  //   "key": "escape",
  //   "command": "hideSuggestWidget",
  //   "when": "suggestWidgetVisible && textInputFocus"
  // },
  {
    "key": "ctrl+n",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetVisible"
  },
  {
    "key": "ctrl+p",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetVisible"
  },
  /*
  I keep trying to open the commands panel with this shortcut
  (instead of "shift+cmd+p"), adding it here as alternate method
  */
  {
    "key": "ctrl+cmd+p",
    "command": "workbench.action.showCommands"
  },
  {
    "key": "ctrl+shift+a",
    "command": "-cursorLineStartSelect",
    "when": "textInputFocus"
  },
  {
    "key": "alt+cmd+\\",
    "command": "workbench.action.terminal.split",
    "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile"
  },
  {
    "key": "cmd+\\",
    "command": "-workbench.action.terminal.split",
    "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile"
  },
  {
    "key": "alt+cmd+\\",
    "command": "workbench.action.splitEditor"
  },
  {
    "key": "cmd+\\",
    "command": "-workbench.action.splitEditor"
  },
  {
    "key": "alt+cmd+\\",
    "command": "workbench.action.terminal.splitInstance",
    "when": "terminalProcessSupported && terminalTabsFocus"
  },
  {
    "key": "cmd+\\",
    "command": "-workbench.action.terminal.splitInstance",
    "when": "terminalProcessSupported && terminalTabsFocus"
  },
  {
    "key": "ctrl+-",
    "command": "-workbench.action.navigateBack"
  },
  {
    "key": "ctrl+1",
    "command": "-workbench.action.openEditorAtIndex1"
  },
  {
    "key": "ctrl+2",
    "command": "-workbench.action.openEditorAtIndex2"
  },
  {
    "key": "ctrl+3",
    "command": "-workbench.action.openEditorAtIndex3"
  },
  {
    "key": "ctrl+4",
    "command": "-workbench.action.openEditorAtIndex4"
  },
  {
    "key": "ctrl+5",
    "command": "-workbench.action.openEditorAtIndex5"
  },
  {
    "key": "ctrl+6",
    "command": "-workbench.action.openEditorAtIndex6"
  },
  {
    "key": "ctrl+7",
    "command": "-workbench.action.openEditorAtIndex7"
  },
  {
    "key": "ctrl+8",
    "command": "-workbench.action.openEditorAtIndex8"
  },
  {
    "key": "ctrl+9",
    "command": "-workbench.action.openEditorAtIndex9"
  },
  {
    "key": "ctrl+0",
    "command": "-workbench.action.lastEditorInGroup"
  },
  {
    "key": "ctrl+]",
    "command": "-extension.vim_ctrl+]",
    "when": "editorTextFocus && vim.active && vim.use<C-]> && !inDebugRepl"
  },
  {
    "key": "ctrl+o",
    "command": "-extension.vim_ctrl+o",
    "when": "editorTextFocus && vim.active && vim.use<C-o> && !inDebugRepl"
  },
  {
    "key": "ctrl+o",
    "command": "-lineBreakInsert",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "shift+cmd+[",
    "command": "-workbench.action.previousEditor"
  },
  {
    "key": "shift+cmd+]",
    "command": "-workbench.action.nextEditor"
  }
]