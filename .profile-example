# ~/.profile: executed by the command interpreter for login shells.
# i.e. add this to your `.bashrc` or `.zshrc`:
#    [[ -s "$HOME/.profile" ]] && source "$HOME/.profile"

# alias commands and shortcuts:
# List files and folders
alias ll="ls -la"
# Restart audio when sound is broken
alias "fix-audio"="sudo launchctl stop com.apple.audio.coreaudiod"

# Mert shortcuts
## see `~/.mertrc-example`
alias "setup-dev"="mert start dev"
alias "dev-setup"="mert start dev"
alias "rails-project-start"="mert start rails-project"
alias "start-rails-project"="mert start rails-project"
alias "start-react-project"="mert start react-project"

# Ngrok shortcuts
## You can use `ngrok config edit` and paste the example from `ngrok.yml-example`
## Or follow the below suggestion (so you can manually edit the file without
## needing to use `ngrok config edit`):
##   1. Create the following folder (name it whatever you want):
##      ~/.ngrok3/
##   2. And symlink that to:
##      /Users/[your-username]/Library/Application Support/ngrok/
alias ngrok-rails="cd ~/ && ngrok start rails"
alias ngrok-react="cd ~/ && ngrok start react"
alias ngrok-go="cd ~/ && ngrok start go"
# Stargate python environment alias
## alias ebcli-virtual-env="source /Users/chrisreynolds/.ebcli-virtual-env/bin/activate"
## alias load-ebcli-virtual-environment="source ~/.ebcli-virtual-env/bin/activate"

# Multi Postgresql instances (diff versions using different ports)
# NOTE: using the PostgresApp now
# https://postgresapp.com/downloads.html
alias "psql-api1"="psql -h localhost -p 5432"
alias "psql-api2"="psql -h localhost -p 5433"

# GEM bunder editor:
#   for quickly opening a bundler gem without needing to locate it
#   usage: bundler open gem-name
#   (preferably 'cd' into project folder first, to make sure bundler opens up gem used by the Rails project)
export EDITOR=vim
export BUNDLER_EDITOR=vim

# Add any additional ENV's here:
## export SOME_LOCALHOST_TOKEN=11f111b11c11e111ac11c11b1d111f11

# Simplify a Rails project grep search:
# i.e.: grep -rsin --exclude-dir={./public/fonts,./log,./tmp} "initiate_bulk_contact_sync" .
# $1 = "what to search for"
# $2 = path
# https://linuxize.com/post/bash-functions/
greprsin_rails() {
  grep -rsin --exclude-dir={./node_modules,./public,./public/packs-test,./public/fonts,./vendor/assets/javascripts/node_modules,./log,./tmp,./git} "$1" $2
}

# grep search for process
#   ARGUMENT_1 ($1) is process name string to search for
#   if -k option set, process will be killed with code -15
#     -k kill_code can be used to change default -15 code
# usage: pid_search process_name
pid_search() {
  # Default to not killing found pid
  local kill_pid=false

  # Loop through arguments to find any options
  #   -k or --kill are the only options we have, everything else goes into POSITIONAL and then resets back into the ARGUMENT number
  # https://stackoverflow.com/a/14203146/1180523
  POSITIONAL=()
  for i in "$@"; do
    case $i in
      # Syntax for:
      # -k value
      # --kill value
      -k|--kill)
      # kill_code="${2:--15}" # Default set above
      # NOTE: not adding 'local ' will make variable Global/permanently set (just like an ENV variable)
      local kill_pid=true
      local kill_code="${2:--15}"
      shift # past argument
      shift # past value
      ;;

      # TODO: find way to combine these 2 different syntaxes (for the same options)

      # Syntax for:
      # -k=value
      # --kill=value
      -k=*|--kill=*)
      # Default set above
      local kill_pid=true
      local kill_code="${i#*=}"
      shift # past argument
      shift # past value
      ;;

      # unknown options (other arguments that don't belong to an option)
      *)
      POSITIONAL+=("$1") # save it in an array for later
      shift # past argument
      ;;
    esac
  done
  # restore positional parameters
  set -- "${POSITIONAL[@]}"

  # Debug values:
  # echo "$1"         # the process to search for
  # echo "$kill_pid"  # if we should kill found process
  # echo "$kill_code" # kill code for killing process

  # If we have process to search for (if $1 argument set)
  # https://stackoverflow.com/a/6482403/1180523
  if [ -z "$1" ] ; then 
    echo "0 of 1 arguments found: ARG1=string to search"
    echo "i.e. pid_search 'process_name'"
  else
    # If we should kill process
    # https://stackoverflow.com/a/2953673/1180523
    if [ "$kill_pid" = true ] ; then
      echo "Found process:"
      ps aux | grep -v 'grep' | egrep "$1"
      ps aux | grep -v 'grep' | egrep "$1" | awk '{print $2}' | xargs kill "${kill_code}"
      echo ""
      echo "Process killed with code: ${kill_code}"
      echo "If that didn't work, manually kill using the pid: kill -9 <process-id>"
    else
      ps aux | grep -v 'grep' | egrep "$1"
      echo ""
      echo "To kill process, append -k after search string"
      echo "i.e. pid_search 'process_name' -k"
    fi
  fi
}
# Searches process for a given tcp port
port_search() {
  # Default to not killing found pid
  local kill_pid=false

  # Loop through arguments to find any options
  #   -k or --kill are the only options we have, everything else goes into POSITIONAL and then resets back into the ARGUMENT number
  # https://stackoverflow.com/a/14203146/1180523
  POSITIONAL=()
  for i in "$@"; do
    case $i in
      # Syntax for:
      # -k value
      # --kill value
      -k|--kill)
      # kill_code="${2:--15}" # Default set above
      # NOTE: not adding 'local ' will make variable Global/permanently set (just like an ENV variable)
      local kill_pid=true
      local kill_code="${2:--15}"
      shift # past argument
      shift # past value
      ;;

      # TODO: find way to combine these 2 different syntaxes (for the same options)

      # Syntax for:
      # -k=value
      # --kill=value
      -k=*|--kill=*)
      # Default set above
      local kill_pid=true
      local kill_code="${i#*=}"
      shift # past argument
      shift # past value
      ;;

      # unknown options (other arguments that don't belong to an option)
      *)
      POSITIONAL+=("$1") # save it in an array for later
      shift # past argument
      ;;
    esac
  done
  # restore positional parameters
  set -- "${POSITIONAL[@]}"

  # Debug values:
  # echo "$1"         # the process to search for
  # echo "$kill_pid"  # if we should kill found process
  # echo "$kill_code" # kill code for killing process

  # If we have process to search for (if $1 argument set)
  # https://stackoverflow.com/a/6482403/1180523
  if [ -z "$1" ] ; then 
    echo "0 of 1 arguments found: ARG1=string to search"
    echo "i.e. port_search 'process_name'"
  else
    # If we should kill process
    # https://stackoverflow.com/a/2953673/1180523
    if [ "$kill_pid" = true ] ; then
      echo "Found process:"
      sudo lsof -i tcp:$1 | egrep -v "grep|PID"
      sudo lsof -i tcp:$1 | egrep -v "grep|PID" | awk '{print $2}' | xargs kill "${kill_code}"
      echo ""
      echo "Process killed with code: ${kill_code}"
      echo "If that didn't work, manually kill using the pid: kill -9 <process-id>"
    else
      sudo lsof -i tcp:$1 | egrep -v "grep"
      echo ""
      echo "To kill process, append -k after search string"
      echo "i.e. port_search 'process_name' -k"
    fi
  fi
}
